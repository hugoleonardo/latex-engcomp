%function [mat] = nonogramsAG(size_lin, size_col);

% 1 Trabalho de Inteligência Computacional ( AG para resolver nonograms)
clear all; close all; clc;

% Definição dos valores de cada linha e coluna referentes à formação da
% figura
mat_lin =   [3,0;
            2,1;
            3,2;
            2,2;
            6,0;
            1,5;
            6,0;
            1,0;
            2,0];
mat_col =   [1,2;
             3,1;
             1,5; 
             7,1;
             5,0;
             3,0;
             4,0;
             3,0];
         
n_lin = 9;
n_col = 8;
rand1 = rand(1); %numero aleatorio usado como criterio de decisão pra gerar matriz inicial (população inicial)
t0 = 0; %temperatura inicial
t = 0; %temperatura corrent
p = rand(1); 
p_1 = rand(1);


mat_temp (n_lin,n_col) = 0;
% Cria uma matriz aleatória com 0's e 1's a atribui essa matriz à X
% (solução inicial)
for i=1:n_lin,
    for j=1:n_col,
        if  (rand1 < 0.5)
            mat_temp(i,j) = 1;
        else
            mat_temp(i,j) = 0;
        end
            rand1 = rand(1);
    end
        
end

mat_final (n_lin,n_col) = 0;
% Atribui X* = X
for i=1:n_lin,
    for j=1:n_col,
        mat_final(i,j) = mat_temp(i,j);
    end        
end

count_1 =0; %variável para contar o número de 1's de um linha ou coluna
espaco =0;
indice1 = 0;
indice2 = 0;
aptidao_lin = 0;
aptidao_col = 0;
aptidao_avg = 0;
vet_indices_lin_temp (n_lin,n_col) = 0; % matriz temporária para armazenamento dos indices das linhas
vet_indices_col_temp (n_lin,n_col) = 0; % matriz temporária para armazenamento dos indices das colunas
vet_aptidao_lin (n_lin,1) = 0; % vetor que armazena as aptidões das linhas
vet_aptidao_col (1,n_col) = 0; % vetor que armazena as aptidões das colunas
qtd_indices = 0; % armazena o qtde de indices em uma linha da matriz
for l=1:n_lin, 
    indice1 = mat_lin(l,1);
    indice2 = mat_lin(l,2);
    for m=1:n_col,
        if mat_final(l,m) == 1;
            count_1 = count_1+1; %variavel auxiliar para contar a quantidade de 's na linha
            espaco = 0;
            if m == n_col, 
                vet_indices_lin_temp(l,m-1) = count_1; %verifica se o último elemento da linha é 1 e atribui o número de 1's à matriz com os indices
                qtd_indices = qtd_indices +1
            end
        else
            espaco = espaco + 1;
            if m == 1,  % verifica se o elemento é o primeiro da coluna, se for, armazena no mesma posição, caso contrário armazena numa posição anterior,
                        % isso é pra evitar que quando chegue na última
                        % coluna não haja espaço para armazenar, pq o
                        % armazenamento só ocorre na próxima iteração
                vet_indices_lin_temp(l,m) = count_1;
                if mat_final(l,m) == 0
                qtd_indices = qtd_indices;
                end
            else 
                vet_indices_lin_temp(l,m-1) = count_1;
                qtd_indices = qtd_indices +1
            end
            count_1 = 0;
            qtd_indices = qtd_indices
        end
    end
    qtd_indices = 0;
    count_1 = 0;
end

for m=1:n_col, 
    indice1 = mat_col(m,1);
    indice2 = mat_col(m,2);
    for l=1:n_lin,
        if mat_final(l,m) == 1;
            count_1 = count_1+1; %variavel auxiliar para contar a quantidade de 's na coluna
            espaco = 0;
            if l == n_lin, 
                vet_indices_col_temp(l-1,m) = count_1; %verifica se o último elemento da coluna é 1 e atribui o número de 1's à matriz com os indices
            end
        else
            espaco = espaco + 1;
            if l == 1,  % verifica se o elemento é o primeiro da coluna, se for, armazena no mesma posição, caso contrário armazena numa posição anterior,
                        % isso é pra evitar que quando chegue na última
                        % coluna não haja espaço para armazenar, pq o
                        % armazenamento só ocorre na próxima iteração
                vet_indices_col_temp(l,m) = count_1; 
            else 
                vet_indices_col_temp(l-1,m) = count_1;
            end
            count_1 = 0;
        end
    end
    count_1 = 0;
end


